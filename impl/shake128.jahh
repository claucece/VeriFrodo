// SPDX-FileCopyrightText: 2021 The VeriFrodo Authors
// SPDX-License-Identifier: MIT

#ifndef FIPS202_EXTRA_HH
#define FIPS202_EXTRA_HH

#include "fips202.jahh"
#include "params.jahh"

// This file has to be modified when changing parameter sets, since CRYPTO_BYTES can be 24 or 32

// BYTES_SEED_A is always 16

fn shake128_CRYPTO_BYTES_to_BYTES_SEED_A(reg ptr u8[BYTES_SEED_A] out, reg const ptr u8[CRYPTO_BYTES] in) -> stack u8[BYTES_SEED_A]
{
    stack u64[25] state;
    reg u8 c;
    inline int i;
    stack ptr u8[BYTES_SEED_A] out_saved;

    out_saved = out;

    state = st0(state);

    for i = 0 to BYTES_SEED_A {
        c = in[i];
        state[u8 i] ^= c;
    }
    state[u8 BYTES_SEED_A] ^= 0x1f;
    state[u8 SHAKE128_RATE-1] ^= 0x80;

    state = __keccakf1600_ref(state);

    out = out_saved;

    for i = 0 to CRYPTO_BYTES {
        c = state[u8 (int)i];
        out[i] = c;
    }
    return out;
}

@[returnaddress="stack"]
fn shake128_2plusBYTES_SEED_A_to_2N(reg ptr u8[2 * N] out, reg const ptr u8[2 + BYTES_SEED_A] in) -> stack u8[2 * N]
{
    stack ptr u8[2 * N] out_saved;
    stack u64[25] state;
    reg u8 byte;
    reg u64 i, j;
    stack u64 j_saved;
    stack u8[SHAKE128_RATE] out_shake128_rate;

    state = st0(state);

    i = 0;
    while (i < 2 + BYTES_SEED_A)
    {
        byte = in[(int)i];
        state[u8 (int)i] ^= byte;
        i += 1;
    }

    state[u8 2+BYTES_SEED_A] ^= 0x1f;
    state[u8 SHAKE128_RATE-1] ^= 0x80;

    j = 0;
    while (j < (2 * N) - SHAKE128_RATE)
    {
        j_saved = j;
        out_saved = out;
        state, out_shake128_rate = shake128_squeezeblock(state, out_shake128_rate);
        j = j_saved;
        out = out_saved;

        i = 0;
        while (i < SHAKE128_RATE)
        {
            byte = out_shake128_rate[u8 (int)i];
            i += 1;

            out[(int)j] = byte;
            j += 1;
        }
    }

    j_saved = j;
    out_saved = out;
    state, out_shake128_rate = shake128_squeezeblock(state, out_shake128_rate);
    j = j_saved;
    out = out_saved;

    i = 0;
    while (j < 2 * N)
    {
        byte = out_shake128_rate[u8 (int)i];
        i += 1;

        out[(int)j] = byte;
        j += 1;
    }

    return out;
}

@[returnaddress="stack"]
fn shake128_1plusCRYPTO_BYTES_to_4timesNtimesNBAR(reg ptr u8[4 * N * NBAR] out, reg const ptr u8[1 + CRYPTO_BYTES] in) -> stack u8[4 * N * NBAR]
{
    stack ptr u8[4 * N * NBAR] out_saved;
    stack u64[25] state;
    reg u8 byte;
    reg u64 i, j;
    stack u64 j_saved;
    stack u8[SHAKE128_RATE] out_shake128_rate;

    state = st0(state);

    i = 0;
    while (i < 1 + CRYPTO_BYTES)
    {
        byte = in[(int)i];
        state[u8 (int)i] ^= byte;
        i += 1;
    }

    state[u8 1 + CRYPTO_BYTES] ^= 0x1f;
    state[u8 SHAKE128_RATE-1] ^= 0x80;

    j = 0;
    while (j < (4 * N * NBAR) - SHAKE128_RATE)
    {
        j_saved = j;
        out_saved = out;
        state, out_shake128_rate = shake128_squeezeblock(state, out_shake128_rate);
        j = j_saved;
        out = out_saved;

        i = 0;
        while (i < SHAKE128_RATE)
        {
            byte = out_shake128_rate[u8 (int)i];
            i += 1;

            out[(int)j] = byte;
            j += 1;
        }
    }

    j_saved = j;
    out_saved = out;
    state, out_shake128_rate = shake128_squeezeblock(state, out_shake128_rate);
    j = j_saved;
    out = out_saved;

    i = 0;
    while (j < 4 * N * NBAR)
    {
        byte = out_shake128_rate[u8 (int)i];
        i += 1;

        out[(int)j] = byte;
        j += 1;
    }

    return out;
}

@[returnaddress="stack"]
fn shake128_PUBLICKEYBYTES_to_BYTES_PKHASH(reg ptr u8[BYTES_PKHASH] out, reg const ptr u8[PUBLICKEYBYTES] in) -> stack u8[BYTES_PKHASH]
{
    stack u64[25] state;
    reg u8 c;
    reg u64 i, j, k;
    stack ptr u8[BYTES_PKHASH] out_saved;

    out_saved = out;

    state = st0(state);

    i = 0;
    while (i < PUBLICKEYBYTES - SHAKE128_RATE)
    {
        j = 0;
        while (j < SHAKE128_RATE)
        {
            c = in[(int)i];
            state[u8 (int)j] ^= c;

            j += 1;
            i += 1;
        }

        state = __keccakf1600_ref(state);
    }
    k = PUBLICKEYBYTES;
    k -= i;

    j = 0;
    while (i < PUBLICKEYBYTES)
    {
        c = in[(int)i];
        state[u8 (int)j] ^= c;

        j += 1;
        i += 1;
    }
    state[u8 (int)k] ^= 0x1f;
    state[u8 SHAKE128_RATE-1] ^= 0x80;
    state = __keccakf1600_ref(state);

    out = out_saved;

    i = 0;
    while (i < BYTES_PKHASH)
    {
        c = state[u8 (int)i];
        out[(int)i] = c;
        i += 1;
    }

    return out;
}

#endif
